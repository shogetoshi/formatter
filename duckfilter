#!/usr/bin/env python
import argparse
import json
import re
import subprocess
import uuid
from datetime import date, datetime

import duckdb

OUTPUT_FORMATS = [
    "ascii",
    "box",
    "column",
    "csv",
    "html",
    "json",
    "line",
    "list",
    "markdown",
    "quote",
    "table",
]


p = argparse.ArgumentParser()
p.add_argument("query")
p.add_argument(
    "-o",
    "--output",
    choices=OUTPUT_FORMATS,
)
args_dict = vars(p.parse_args())


def json_serial(obj):
    if isinstance(obj, (datetime, date)):
        return obj.isoformat()
    elif isinstance(obj, uuid.UUID):
        return str(obj)
    raise TypeError(f"Type {type(obj)} not serializable")


def get_query(query):
    query = re.sub(r"from +JSON", "from read_json_auto('/dev/stdin')", query)
    query = re.sub(r"from +CSV", "from read_csv_auto('/dev/stdin')", query)
    query = re.sub(r"from +TSV", "from read_csv_auto('/dev/stdin')", query)
    return query


def extract_output_format(args):
    if output_format := args.get("output"):
        args.pop("output")
    return output_format


def get_options(args):
    return []


def query_json_with_duckdb(sql_query):
    conn = duckdb.connect(database=":memory:")

    try:
        result = conn.execute(sql_query).fetchall()
        column_names = [desc[0] for desc in conn.description]
        result_dict = [dict(zip(column_names, row)) for row in result]
        return result_dict
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return []
    finally:
        conn.close()


def main():
    query = get_query(args_dict["query"])
    output_format = extract_output_format(args_dict)

    if output_format != "json":
        cmd_array = [
            "duckdb",
            " ".join(get_options(args_dict)),
            f"-{output_format}" if output_format else "",
            "-c",
            f'"{query}"',
        ]
        cmd = " ".join(cmd_array)
        # print(cmd)
        subprocess.run(
            cmd,
            shell=True,
            text=True,
        )
    else:
        j = query_json_with_duckdb(query)
        print(json.dumps(j, default=json_serial))


if __name__ == "__main__":
    main()
